@page "/"
@rendermode InteractiveServer
@using ClearanceTrackerApp.Data
@inject AppDb Db
@using Microsoft.EntityFrameworkCore

<h3>Clearance Tracker</h3>

<p style="opacity:.7">Status: @status</p>

<div style="display:flex; gap:.5rem; flex-wrap:wrap; margin:.5rem 0;">
  <span class="chip Pending">Pending: @countPending</span>
  <span class="chip InProgress">InProgress: @countInProgress</span>
  <span class="chip Approved">Approved: @countApproved</span>
  <span class="chip Rejected">Rejected: @countRejected</span>
  <span class="chip" style="background:#eee;">Total: @countTotal</span>
  <span class="chip Approved">Approved: @pctApproved%</span>
</div>

<div style="margin: .5rem 0; display:flex; gap:.5rem; align-items:center;">
  <button class="btn btn-primary" type="button" @onclick="() => showNew = !showNew">@(showNew ? "Close" : "Add")</button>
</div>

@if (showNew)
{
  <div style="border:1px solid #ddd; padding: .75rem; border-radius:.5rem; max-width:520px; margin-bottom:.75rem;">
    <h4 style="margin-top:0">New Person</h4>
    <div style="display:grid; grid-template-columns: 140px 1fr; gap:.5rem 1rem; align-items:center;">
      <label>Full name</label>
      <input @bind="newName" />

      <label>Agency ID</label>
      <input @bind="newAgencyId" />

      <label>Position</label>
      <input @bind="newPosition" />

      <label>Note (optional)</label>
      <input @bind="newNote" />
    </div>
    <div style="margin-top:.75rem; display:flex; gap:.5rem;">
      <button type="button" @onclick="CreateAsync">Create</button>
      <button type="button" @onclick="() => showNew = false">Cancel</button>
    </div>
    <p style="opacity:.7; margin:.5rem 0 0 0;">@createMsg</p>
  </div>
}


@if (rows is null)
{
    <p>Loading…</p>
}
else if (rows.Count == 0)
{
    <p>No records yet.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>ID</th>
                <th>Position</th>
                <th>State</th>
                <th>Updated</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var r in rows)
        {
            <tr>
                <td>@r.FullName</td>
                <td>@r.AgencyId</td>
                <td>@r.Position</td>
                <td>@r.State</td>
                <td>@((r.LastUpdatedUtc ?? r.CreatedUtc).ToLocalTime().ToString("g"))</td>
                <td class="d-inline-flex gap-2">
                    @if (r.State != ClearanceState.Rejected && r.State != ClearanceState.Approved)
                    {
                        <button type="button" class="btn btn-success" @onclick="async () => await AdvanceAsync(r.Id)">Advance</button>
                        <button type="button" class="btn btn-danger" @onclick="async () => await RejectAsync(r.Id)">Reject</button>
                    }                    
                    <button type="button" class="btn btn-primary" @onclick="async () => await OpenHistoryAsync(r.Id)">History</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (showHistory && historyPerson is not null)
{
    <div style="position:fixed; inset:0; background:rgba(0,0,0,.35); display:flex; align-items:center; justify-content:center;">
        <div style="background:white; padding:1rem; border-radius:.5rem; min-width:420px; max-width:700px;">
            <h4 style="margin-top:0">History — @historyPerson.FullName (@historyPerson.AgencyId)</h4>
            @if (historyEvents is null || historyEvents.Count == 0)
            {
                <p>No events yet.</p>
            }
            else
            {
                <table class="table">
                    <thead><tr><th>When (local)</th><th>From</th><th>To</th><th>Comment</th></tr></thead>
                    <tbody>
                    @foreach (var e in historyEvents)
                    {
                        <tr>
                            <td>@e.AtUtc.ToLocalTime().ToString("g")</td>
                            <td>@e.From</td>
                            <td>@e.To</td>
                            <td>@e.Comment</td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
            <div style="display:flex; justify-content:flex-end; gap:.5rem;">
                <button type="button" @onclick="CloseHistory">Close</button>
            </div>
        </div>
    </div>
}

@code {
    List<PersonClearance>? rows;
    string status ="idle";
    bool showNew = false;
    string newName = "", newAgencyId = "", newPosition = "", newNote = "", createMsg = "";
    bool showHistory = false;
    PersonClearance? historyPerson;
    List<ClearanceEvent>? historyEvents;
    int countPending, countInProgress, countApproved, countRejected, countTotal;
    double pctApproved;


    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync();
    }

    async Task ReloadAsync()
    {
        rows = await Db.Clearances
            .AsNoTracking()
            .OrderByDescending(x => x.LastUpdatedUtc ?? x.CreatedUtc)
            .ToListAsync();
        StateHasChanged();
        await LoadStatsAsync();
    }

    async Task AdvanceAsync(int id)
    {
        status = $"advancing {id}…";
        try
        {
            var pc = await Db.Clearances
                .Include(x => x.Events)
                .FirstOrDefaultAsync(x => x.Id == id);

            if (pc is null) { status = $"not found: {id}"; return; }

            var to = Domain.Next(pc.State);
            if (to == pc.State) { status = $"no-op; already {pc.State}"; return; }

            Db.Events.Add(new ClearanceEvent
            {
                PersonClearanceId = id,
                From = pc.State,
                To = to,
                Comment = "advanced via UI",
                AtUtc = DateTime.UtcNow
            });

            pc.State = to;
            pc.LastUpdatedUtc = DateTime.UtcNow;
            pc.Note = "advanced via UI";

            await Db.SaveChangesAsync();

            await ReloadAsync();
            status = $"advanced {id} → {to}";
        }
        catch (Exception ex)
        {
            status = "error: " + ex.Message;
            Console.Error.WriteLine(ex); // also logs to server console
            StateHasChanged();
        }
    }

    async Task RejectAsync(int id)
    {
        status = $"rejecting {id}…";
        try
        {
            var pc = await Db.Clearances
                .Include(x => x.Events)
                .FirstOrDefaultAsync(x => x.Id == id);

            if (pc is null) { status = $"not found: {id}"; return; }

            var to = ClearanceState.Rejected;
            if (to == pc.State) { status = $"no-op; already {pc.State}"; return; }

            Db.Events.Add(new ClearanceEvent
            {
                PersonClearanceId = id,
                From = pc.State,
                To = to,
                Comment = "Rejected via UI",
                AtUtc = DateTime.UtcNow
            });

            pc.State = to;
            pc.LastUpdatedUtc = DateTime.UtcNow;
            pc.Note = "Rejected via UI";

            await Db.SaveChangesAsync();

            await ReloadAsync();
            status = $"Rejected {id} → {to}";
        }
        catch (Exception ex)
        {
            status = "error: " + ex.Message;
            Console.Error.WriteLine(ex); // also logs to server console
            StateHasChanged();
        }
    }

    async Task CreateAsync()
    {
        if (string.IsNullOrWhiteSpace(newName) || string.IsNullOrWhiteSpace(newAgencyId))
        {
            createMsg = "Name and Agency ID are required.";
            return;
        }

        try
        {
            var pc = new PersonClearance
            {
                FullName = newName.Trim(),
                AgencyId = newAgencyId.Trim(),
                Position = newPosition?.Trim() ?? "",
                Note = string.IsNullOrWhiteSpace(newNote) ? null : newNote.Trim(),
                State = ClearanceState.Pending,
                CreatedUtc = DateTime.UtcNow
            };

            Db.Clearances.Add(pc);
            await Db.SaveChangesAsync();

            // reset form
            newName = newAgencyId = newPosition = newNote = "";
            createMsg = "Created.";
            showNew = false;

            // refresh table
            await ReloadAsync();
        }
        catch (Exception ex)
        {
            createMsg = "Error: " + ex.Message;
            Console.Error.WriteLine(ex);
        }
    }

    async Task OpenHistoryAsync(int id)
    {
        // pull person + events (newest first)
        historyPerson = await Db.Clearances.FirstOrDefaultAsync(x => x.Id == id);
        historyEvents = await Db.Events
            .Where(e => e.PersonClearanceId == id)
            .OrderByDescending(e => e.AtUtc)
            .ToListAsync();

        showHistory = true;
        StateHasChanged();
    }

    void CloseHistory()
    {
        showHistory = false;
        historyPerson = null;
        historyEvents = null;
    }

    async Task LoadStatsAsync()
    {
        countPending    = await Db.Clearances.CountAsync(x => x.State == ClearanceState.Pending);
        countInProgress = await Db.Clearances.CountAsync(x => x.State == ClearanceState.InProgress);
        countApproved   = await Db.Clearances.CountAsync(x => x.State == ClearanceState.Approved);
        countRejected   = await Db.Clearances.CountAsync(x => x.State == ClearanceState.Rejected);
        countTotal      = countPending + countInProgress + countApproved + countRejected;
        pctApproved     = countTotal == 0 ? 0 : Math.Round(100.0 * countApproved / countTotal, 1);
    }


}
